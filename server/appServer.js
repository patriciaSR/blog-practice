const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const fs = require('fs');
const https = require('https');

// repository DB
const repository = require('./repository');

// passport and middlewares
const passport = require('./utils/passport');
const isRoleAllowed = require('./middlewares/isRoleAllowed');

// routers
const postsRouter = require('./controllers/postsRouter');
const commentsRouter = require('./controllers/commentsRouter');
const offensiveRouter = require('./controllers/offensiveRouter');
const authRouter = require('./controllers/authRouter');
const signupRouter = require('./controllers/signupRouter');

const app = express();
// Enable CORS
app.use(cors());

// Acept request entity too large
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));

// Convert json bodies to JavaScript object
app.use(express.json());

// init passport authentication
app.use(passport.initialize());

// routes
app.use('/login', authRouter);
app.use('/signup', signupRouter);
app.use('/posts', postsRouter);
app.use('/posts/:id/comments', commentsRouter);
app.use(
  '/offensive-words',
  passport.authenticate('jwt', { session: false }),
  isRoleAllowed,
  offensiveRouter,
);

module.exports = app;

// server.js
module.exports.main = async function main(connection) {
  await repository.connect(connection);

  await repository.checkDefault();

  // to create a new autogenerated false safe certificate
  // openssl req -nodes -new -x509 -keyout server.key -out server.cert
  https
    .createServer(
      {
        key: fs.readFileSync('server.key'),
        cert: fs.readFileSync('server.cert'),
      },
      app,
    )
    .listen(3443, () => {
      console.log('Https server started in port 3443');
    });
};
